페이지 이동방식
- 포워딩방식 : url변경 X, 데이터 전송 O
- 리다이렉팅방식 :  url변경 O, 데이터 전송 X 
=>어노테이션 처리 시 포워딩, 리다이렉팅 구분방법
리턴하는 view경로에 redirect:이 붙으면 리다이렉팅,
안 붙으면 포워딩

@ModelAttribute 어노테이션의 기능
1. Command객체의 이름을 변경
2. @RequestMapping어노테이션이 실행되기 전 먼저 객체를 생성함.
=>리턴하는 맵핑 메소드의 Model객체에 자동으로 담는다.
3. @SessionAttribute와 같이 사용할 경우 동기화 객체기능을 함.
-조건 @SessionAttribute("객체명")과 @ModelAttribute("객체명") 
또는 model.addAttribute("객체명", 값); 에 있는 "객체명"이 모두 일치해야한다.
session객체에 담겨있는 것이 없으면 model에 담겨진 데이터로 갱신됨.
model객체에 변경된 내용이 있으면 변경된 내용은 변경된 내용으로 적용되며,
session객체에도 변경된 내용으로 동기화됨. model객체에 없는 데이터가 있으면, 
session객체에서 데이터를 끌어다가 사용함.

흐름
1. @SessionAttribute("board")로 설정되어 있으면, 로직에서 
@ModelAttribute("board")로 설정된 객체나 
model.addAttribute("board",값); 으로 설정된 객체를 찾는다.

2. model객체에 담긴 내용이 있으면 session객체에 동일하게 담는다.

3. 다시 @ModelAttribute("board")통해 model객체에 대한 데이터를 보낼때
변경된 파라미터(필드=멤버필드)값이있으면, 변경된 값으로 model객체와
session객체의 값을 변경해놓는다.

4. 다시 @ModelAttribute("board")통해 model객체에 대한 데이터를 보낼때
변경된 파라미터(필드=멤버필드)값이 없으면, session객체에 있는 데이터를 끌어와
model객체에 채워 넣는다. 

5. model객체와 session객체의 데이터를 동기화한다.




